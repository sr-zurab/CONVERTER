// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
import React, {useEffect, useState} from 'react';
import {useDispatch, useSelector} from 'react-redux';
import {BrowserRouter as Router, Routes, Route, Navigate, useNavigate} from 'react-router-dom';
import {
    fetchOrganizations,
    selectOrganization,
    selectReport
} from './store/organizationSlice.js';
import AddOrganizationForm from './components/AddOrganizationForm';
import EditOrganizationForm from './components/EditOrganizationForm';
import OrganizationDetails from './components/OrganizationDetails';
import PlanFhdTabs from './components/PlanFhdTabs';
import Modal from './components/Modal';
import LoginPage from './components/LoginPage';
import RegisterPage from './components/RegisterPage';
import './App.css';
import {IoIosAddCircleOutline} from "react-icons/io";
import {FiLogOut} from "react-icons/fi";
import StateTaskControls from "./components/componentsStateTask/StateTaskTableControls.jsx";
// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ª–µ–≤–∞—è –ø–∞–Ω–µ–ª—å, –∫–æ–Ω—Ç–µ–Ω—Ç, –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞)
const MainApp = () => {
    const dispatch = useDispatch();
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redux store
    const organizations = useSelector(state => state.organizations.list);
    const selectedOrg = useSelector(state => state.organizations.selected);
    const selectedReport = useSelector(state => state.organizations.selectedReport);

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ –∏ —à–∏—Ä–∏–Ω–æ–π —Å–∞–π–¥–±–∞—Ä–∞
    const [showAddModal, setShowAddModal] = useState(false);
    const [showEditModal, setShowEditModal] = useState(false);
    const [sidebarWidth, setSidebarWidth] = useState(240);
    const [isResizing, setIsResizing] = useState(false);
    const [collapsedOrgs, setCollapsedOrgs] = useState(new Set());

    // --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
    const [isAuth, setIsAuth] = useState(!!localStorage.getItem('access'));
    const navigate = useNavigate();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø—Ä–∏ –≤—Ö–æ–¥–µ
    useEffect(() => {
        if (isAuth) {
            dispatch(fetchOrganizations());
        }
    }, [dispatch, isAuth]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const handleLogout = () => {
        localStorage.removeItem('access');
        localStorage.removeItem('refresh');
        setIsAuth(false);
        navigate('/login');
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å–∞–π–¥–±–∞—Ä–∞ –º—ã—à—å—é
    useEffect(() => {
        const handleMouseMove = (e) => {
            if (isResizing) {
                setSidebarWidth(Math.max(150, Math.min(e.clientX, 600)));
            }
        };
        const handleMouseUp = () => setIsResizing(false);

        document.addEventListener('mousemove', handleMouseMove);
        document.addEventListener('mouseup', handleMouseUp);
        return () => {
            document.removeEventListener('mousemove', handleMouseMove);
            document.removeEventListener('mouseup', handleMouseUp);
        };
    }, [isResizing]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–≤—ã–±–æ—Ä/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ)
    const handleOrgClick = (org) => {
        if (!selectedOrg || selectedOrg.id !== org.id) {
            dispatch(selectOrganization(org));
            // –ù–µ —Ç—Ä–æ–≥–∞–µ–º collapsedOrgs –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–±–æ—Ä–µ
        } else {
            // –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∫–ª–∏–∫–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            dispatch(selectOrganization(org));
            setCollapsedOrgs(prev => {
                const newCollapsed = new Set(prev);
                if (newCollapsed.has(org.id)) {
                    newCollapsed.delete(org.id);
                } else {
                    newCollapsed.add(org.id);
                }
                return newCollapsed;
            });
        }
    };

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    return (
        <>
            {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */}
            <div className="logout-bar">
                <button className="logout-button" onClick={handleLogout} title="–í—ã–π—Ç–∏">
                    <FiLogOut style={{marginRight: 6, fontSize: 18}}/> –í—ã–π—Ç–∏
                </button>
            </div>
            <div className="app-container">
                {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ */}
                <div className="sidebar" style={{width: sidebarWidth}}>
                    <button className="my-button" onClick={() => setShowAddModal(true)}>
                        <IoIosAddCircleOutline className="my-icons"/>
                    </button>
                    <ul className="org-list">
                        {organizations.map(org => (
                            <li
                                key={org.id}
                                className={`${selectedOrg?.id === org.id ? 'selected' : ''} ${collapsedOrgs.has(org.id) ? 'collapsed' : ''}`}
                            >
                                <div
                                    className="org-header"
                                    onClick={() => handleOrgClick(org)}
                                >
                                    {org.name}
                                </div>
                                <div className="org-content">
                                    {selectedOrg?.id === org.id && (
                                        <>
                                            <div className="report-item" onClick={() => dispatch(selectReport('planFhd'))}>
                                                üìÑ –ü–ª–∞–Ω –§–•–î
                                            </div>
                                            <div className="report-item" onClick={() => dispatch(selectReport('stateTask'))}>
                                                üß© –ì–æ—Å–∑–∞–¥–∞–Ω–∏–µ
                                            </div>
                                        </>
                                    )}
                                </div>
                            </li>
                        ))}
                    </ul>
                </div>

                {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã —Å–∞–π–¥–±–∞—Ä–∞ */}
                <div className="separator" onMouseDown={() => setIsResizing(true)}/>

                {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
                <div className="main-content">
                    {selectedOrg ? (
                        selectedReport === 'planFhd' ? (
                            <PlanFhdTabs organization={selectedOrg}/>
                        ) : selectedReport === 'stateTask' ? (
                            <StateTaskControls organization={selectedOrg}/>
                        ) : (
                            <OrganizationDetails org={selectedOrg} onEdit={() => setShowEditModal(true)}/>
                        )
                    ) : (
                        <p>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é</p>
                    )}
                </div>

                {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */}
                <Modal isOpen={showAddModal} onClose={() => setShowAddModal(false)}>
                    <AddOrganizationForm onClose={() => setShowAddModal(false)}/>
                </Modal>

                {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */}
                <Modal isOpen={showEditModal} onClose={() => setShowEditModal(false)}>
                    {selectedOrg && (
                        <EditOrganizationForm
                            organization={selectedOrg}
                            onClose={() => setShowEditModal(false)}
                        />
                    )}
                </Modal>
            </div>
        </>
    );
};

// –ó–∞—â–∏—â—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
function PrivateRoute({children}) {
    const isAuth = !!localStorage.getItem('access');
    return isAuth ? children : <Navigate to="/login" />;
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const App = () => (
    <Router>
        <Routes>
            <Route path="/login" element={<LoginPage />} />
            <Route path="/register" element={<RegisterPage />} />
            <Route path="/*" element={
                <PrivateRoute>
                    <MainApp />
                </PrivateRoute>
            } />
        </Routes>
    </Router>
);

export default App;
